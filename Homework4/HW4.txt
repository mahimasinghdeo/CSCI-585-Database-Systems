
QUERY1
==========================================================

graph = TinkerGraph.open()
g = graph.traversal()

v1 = g.addV("CS101").property(id, "CS101").next()
v2 = g.addV("CS201").property(id, "CS201").next()
v3 = g.addV("CS220").property(id, "CS220").next()
v4 = g.addV("CS334").property(id, "CS334").next()
v5 = g.addV("CS400").property(id, "CS400").next()
v6 = g.addV("CS420").property(id, "CS420").next()
v7 = g.addV("CS526").property(id, "CS526").next()
v8 = g.addV("CS681").property(id, "CS681").next()


g.addE("pre_req").from(v2).to(v1).property(id,1)
g.addE("pre_req").from(v3).to(v2).property(id,2)
g.addE("pre_req").from(v4).to(v2).property(id,3)
g.addE("pre_req").from(v5).to(v4).property(id,4)
g.addE("pre_req").from(v6).to(v3).property(id,5)
g.addE("co_req").from(v6).to(v3).property(id,6)
g.addE("pre_req").from(v7).to(v5).property(id,7)
g.addE("co_req").from(v7).to(v5).property(id,8)
g.addE("pre_req").from(v8).to(v4).property(id,9)

g
==>graphtraversalsource[tinkergraph[vertices:8 edges:9], standard]

EXPLANATION:
The first command creates a graph instance called graph. 
The second command creates a traversal instance which is an Iterator to traverse the graph.
v1 through v8 creates 8 vertices with a label as well as an id.
Then, we create edges which can have a label pre_req or co_req, a unique id as well as the vertices from where they originate and vertices to where they go.


QUERY 2
=============================================================
g.V().as("a").out().as("b").groupCount().by(select("a","b")).unfold().filter(select(values).is(eq(2))).select(keys)

==>[a:v[CS526],b:v[CS400]]
==>[a:v[CS420],b:v[CS220]]

EXPLANATION:
We take every vertex as 'a' and every adjacent vertex with an incoming edge from a as 'b'. 
We use groupCount by a and b to select the number of times 'a' and 'b' have been part of a traversal.
We  unfold these values to display them separately.
We are only interested in pairs which are traversed twice, therefore we use filter.
We are only interested in values of a and b hence we need only keys and not the value(i.e. 2)

QUERY 3
=======================================================================
g.V("CS526").repeat(out().dedup()).emit()

==>v[CS400]
==>v[CS334]
==>v[CS201]
==>v[CS101]

EXPLANATION:
We choose a given vertex and repeatedly find the vertex which has an edge going to it from the given vertex. (finding predecessors)
We use dedup to remove repeatedly seen objects from the traversal.
emit() is used along with repeat to display the results of the repeated function.

QUERY 4
===========================================================================
g.V("CS101").repeat(__.in()).emit().path().count(local).max()

==>5

EXPLANATION:
We start with a given node and repeatedly find the vertices which have their outgoing edges to the given node. These edges form a path and we compute the length of each path and finally find the maximum.

















